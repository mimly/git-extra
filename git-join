#!/bin/bash

set -o errexit
set -o errtrace
set -o nounset
set -o pipefail

. bash_template.sh
. fs4git.sh

SCRIPT_VERSION="1.1.0"
SCRIPT_DESCRIPTION="join range of revisions"
SCRIPT_FULL_DESCRIPTION="-"
SCRIPT_ARGUMENTS="[OPTION]... [FILE]..."
SCRIPT_OPTIONS=(\
    "--latest"\
    "--oldest"\
    "-d DATE, --date=DATE"\
    "-m MESSAGE, --message=MESSAGE"\
    "-f FROM, --from=FROM"\
    "-t TO, --to=TO"\
    "-v, --verbose"\
    "--help"\
    "--version"\
)
SCRIPT_OPTION_DESCRIPTIONS=(\
    "latest revision date, default"\
    "oldest revision date"\
    "date format is YYYY-MM-DDThh:mm:ss"\
    "defaults to latest revision message, i.e. 1's message"\
    "first revision (incl.), defaults to 1"\
    "last revision (excl.), defaults to FROM + 1"\
    "explain what is being done"\
    "display this help and exit"\
    "output version information and exit"\
)
SCRIPT_EXAMPLES=(\
    "2..4  # joins 2nd and 3rd revision with 2nd revisions date and message"\
)
SCRIPT_SEE_ALSO=(\
    "git-logs(1)"\
    "git-revision(1)"\
    "git-save(1)"\
)

# # #   D E F A U L T   V A L U E S   # # #
if isGitRepo ; then
    originHash=$(commitHash HEAD)
    from=$(commitNumber HEAD)
    fromHash=$(commitHash HEAD)
    to=$(commitNumber $(( from + 1 )))
    toHash=$(commitHash "${to}")
    date=$(commitDate "${from}")
    message=$(commitMessage "${from}")
fi
# # #   E N D   # # # # # # # # # # # # # #

# We use "$@" instead of $* to preserve argument-boundary information
# Add : to suppress getopt error messages, i.e. getopt -o ':...'
ARGS=$(getopt -o 'd:m:f:t:v' --long 'latest,oldest,date:,message:,from:,to:,verbose,help,version,update-manual' -- "$@") || { usage ; exit 1 ; }
eval "set -- ${ARGS}"

while true; do
    case $1 in
        (--latest)
            isGitRepo || { error "not a git repository" ; usage ; exit 1 ; }
            [[ ! -v isDateSet ]] || { error "date already selected" ; usage ; exit 1 ; }
            [[ ! -v isMessageSet ]] || { error "message already selected" ; usage ; exit 1 ; }
            isDateSet= ; date="LATEST" ; isMessageSet= ; message="LATEST" shift ;;
        (--oldest)
            isGitRepo || { error "not a git repository" ; usage ; exit 1 ; }
            [[ ! -v isDateSet ]] || { error "date already selected" ; usage ; exit 1 ; }
            [[ ! -v isMessageSet ]] || { error "message already selected" ; usage ; exit 1 ; }
            isDateSet= ; date="OLDEST" ; isMessageSet= ; message="OLDEST" ; shift ;;
        (-d|--date)
            isGitRepo || { error "not a git repository" ; usage ; exit 1 ; }
            [[ ! -v isDateSet ]] || { error "date already selected" ; usage ; exit 1 ; }
            isValidDate "$2" || { error "date format is YYYY-mm-ddTHH:MM:SS" ; usage ; exit 1 ; }
            isDateSet= ; date=$2 ; shift 2 ;;
        (-m|--message)
            isGitRepo || { error "not a git repository" ; usage ; exit 1 ; }
            [[ ! -v isMessageSet ]] || { error "message already selected" ; usage ; exit 1 ; }
            isMessageSet= ; message=$2 ; shift 2 ;;
        (-f|--from)
            isGitRepo || { error "not a git repository" ; usage ; exit 1 ; }
            isValidCommit "$2" || { error "revision does not exist" ; usage ; exit 1 ; }
            from=$(commitNumber "$2") ; fromHash=$(commitHash "${from}") ; shift 2 ;;
        (-t|--to)
            isGitRepo || { error "not a git repository" ; usage ; exit 1 ; }
            isValidCommit "$2" || { error "revision does not exist" ; usage ; exit 1 ; }
            to=$(commitNumber "$2") ; toHash=$(commitHash "${to}") ; shift 2 ;;
        (-v|--verbose)
            isGitRepo || { error "not a git repository" ; usage ; exit 1 ; }
            verbose= ; shift ;;
        (--help)
            usageFull ; exit 0 ;;
        (--version)
            about ; changelog ; exit 0 ;;
        (--update-manual) # hidden option
            updateManual ; exit 0 ;;
        (--)
            shift ; break ;;
        (*)
            usage ; exit 1 ;;
    esac
done

remainingArgs=("$@")

# # #   H E L P E R   F U N C T I O N S   # # #
originRevision() {
    git reflog | grep "${originHash:0:6}" | head -1 | awk '{ print substr($2, 0, length($2) - 1) }'
}
# # #   E N D   # # # # # # # # # # # # # # # #

main() {
    # errors=()

    local numberOfRevisions
    numberOfRevisions=$(numberOfCommitsBetween "${from}" "${to}")
    if [[ ${numberOfRevisions} -lt 1 || ${numberOfRevisions} -gt $(( $(totalNumberOfCommits HEAD) - from )) ]] ; then
        error "wrong revision range" ; usage ; exit 1
    fi

    local joinedRevisions=() hash
    for hash in $(git rev-list --abbrev-commit "${toHash}".."${fromHash}") ; do
        joinedRevisions+=("$(git logs --revision "${hash}")")
    done

    if [[ ! -v verbose ]] ; then
        exec 3>&1 4>&2 1>/dev/null 2>&1
    fi

    case ${date} in
        ("LATEST")
            date=$(commitDate "${from}") ;;
        ("OLDEST")
            date=$(commitDate "$(( to - 1 ))") ;;
        (*) # default/custom date supplied
            if [[ ! -v isDateSet ]] ; then
                date=$(commitDate "${from}")
            fi ;;
    esac

    case ${message} in
        ("LATEST")
            message=$(commitMessage "${from}") ;;
        ("OLDEST")
            message=$(commitMessage "$(( to - 1 ))") ;;
        (*) # default/custom message supplied
            if [[ ! -v isMessageSet ]] ; then
                message=$(commitMessage "${from}")
            fi ;;
    esac

    local files quotedFiles
    files=("${remainingArgs[@]}")
    quotedFiles=${files[*]@Q}

    export GIT_SEQUENCE_EDITOR
    GIT_SEQUENCE_EDITOR="sed -i "
    local diff
    diff=$(( to - from ))
    case ${diff} in
        (1)
            ;;
        (*) # more than one commit
            GIT_SEQUENCE_EDITOR+="-e '2,${diff}{s/^pick/fixup/}' "
            ;;
    esac
    GIT_SEQUENCE_EDITOR+="-e '${diff}a exec git stash pop ; git revision --verbose --amend --date \"${date}\" \"${message}\" ${quotedFiles//\'/\"} || { git stash push ; exit 1 ; } ; git stash push' "
    # preserve dates for all (latest) commits before FROM commit
    for hash in $(git rev-list --abbrev-commit --reverse "${fromHash}"..HEAD) ; do
        GIT_SEQUENCE_EDITOR+="-e '$(( ++diff ))a exec git revision --verbose --amend --date $(commitDate "${hash}") \"$(commitMessage "${hash}")\" || { exit 1 ; }' "
    done
    git stash push # cannot rebase due to unstaged changes
    git rebase -i "${toHash}"
    git stash pop || { true; } # returns 1 if no stash entries found

    if [[ ! -v verbose ]] ; then
        exec 1>&3 2>&4
    fi

    local revision
    for revision in "${joinedRevisions[@]}" ; do
        printf "%s\n" "${revision}"
    done
    printf "* * * REVISIONS JOINED AS FOLLOWS: * * *\n\n"
    git logs --revision "${from}"
}

recover() {
    printf "\n\n* * *   R E C O V E R (git-join)   * * *\n\n"

    git rebase --abort

    git stash pop

    # reset the index, but not the working tree (i.e. the changed files are preserved but not marked for commit)
    git reset "$(originRevision)" --

    if [[ ! -v verbose ]] ; then
        exec 1>&3 2>&4
    fi

    # for errorMsg in "${errors[@]}" ; do
    #     error "$errorMsg"
    # done
    error "recovered at ${originHash}" ; usage ; exit 1
}

trap recover SIGINT ERR && main
