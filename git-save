#!/bin/bash

# shellcheck disable=SC1091,SC2034

set -o errexit
set -o errtrace
set -o nounset
set -o pipefail

. bash_template.sh
. fs4git.sh

SCRIPT_VERSION="1.1.0"
SCRIPT_DESCRIPTION="update current (or past) revision"
SCRIPT_FULL_DESCRIPTION="-"
SCRIPT_ARGUMENTS="[OPTION]... [FILE]..."
SCRIPT_OPTIONS=(\
    "--now"\
    "--then"\
    "-d DATE, --date=DATE"\
    "-m MESSAGE, --message=MESSAGE"\
    "-r REVISION, --revision=REVISION"\
    "-v, --verbose"\
    "--help"\
    "--version"\
)
SCRIPT_OPTION_DESCRIPTIONS=(\
    "current date"\
    "concerned revision date, default"\
    "date format is YYYY-mm-ddTHH:MM:SS"\
    ""\
    ""\
    "explain what is being done"\
    "display this help and exit"\
    "output version information and exit"\
)
SCRIPT_EXAMPLES=(\
    ""\
)
SCRIPT_SEE_ALSO=(\
    "git-join(1)"\
    "git-logs(1)"\
    "git-revision(1)"\
)

# # #   D E F A U L T   V A L U E S   # # #
ORIGIN_HASH=$(commitHash HEAD || { true; })
# # #   E N D   # # # # # # # # # # # # # #

# We use "$@" instead of $* to preserve argument-boundary information
# Add : to suppress getopt error messages, i.e. getopt -o ':...'
ARGS=$(getopt -o 'd:m:r:v' --long 'now,then,date:,message:,revision:,verbose,help,version,update-manual' -- "$@") || { usage ; exit 1 ; }
eval "set -- $ARGS"

while true; do
    case $1 in
        (--now)
            [[ -z "${DATE:+date}" ]] || { error "date already selected" ; usage ; exit 1 ; }
            DATE=$(date +%Y-%m-%dT%H:%M:%S --date now) ; shift ;;
        (--then)
            [[ -z "${DATE:+date}" ]] || { error "date already selected" ; usage ; exit 1 ; }
            DATE= ; shift ;;
        (-d|--date)
            [[ -z "${DATE:+date}" ]] || { error "date already selected" ; usage ; exit 1 ; }
            isValidDate "$2" || { error "date format is YYYY-mm-ddTHH:MM:SS" ; usage ; exit 1 ; }
            DATE=$2 ; shift 2 ;;
        (-m|--message)
            MESSAGE=$2 ; shift 2 ;;
        (-r|--revision)
            isValidCommit "$2" || { error "revision does not exist" ; usage ; exit 1 ; }
            REVISION=$(commitHash "$2") ; shift 2 ;;
        (-v|--verbose)
            VERBOSE= ; shift ;;
        (--help)
            usageFull ; exit 0 ;;
        (--version)
            about ; changelog ; exit 0 ;;
        (--update-manual) # hidden option
            updateManual ; exit 0 ;;
        (--)
            shift ; break ;;
        (*)
            usage ; exit 1 ;;
    esac
done

REMAINING_ARGS=("$@")

# # #   H E L P   F U N C T I O N S   # # #
originRevision() {
    git reflog | grep "${ORIGIN_HASH:0:6}" | head -1 | awk '{ print substr($2, 0, length($2) - 1) }'
}
# # #   E N D   # # # # # # # # # # # # # #

main() {
    # ERRORS=()

    if [[ -z ${VERBOSE+set} ]] ; then
        exec 3>&1 4>&2 1>/dev/null 2>&1
    fi

    : "${REVISION:=$(commitHash HEAD)}"
    : "${DATE:=$(commitDate "$REVISION")}"
    : "${MESSAGE:=$(commitMessage "$REVISION")}"
    FILE=("${REMAINING_ARGS[@]}")

    local UPDATED_REVISION
    UPDATED_REVISION=$(git logs --revision "$REVISION")

    git join --verbose --date "$DATE" --message "$MESSAGE" --from "$REVISION" --to "$(commitHash "$REVISION~1")" "${FILE[@]}" || { return 1 ; }

    if [[ -z ${VERBOSE+set} ]] ; then
        exec 1>&3 2>&4
    fi

    printf "%s\n" "$UPDATED_REVISION"
    printf "* * * #%s REVISION UPDATED AS FOLLOWS * * *\n\n" "${REVISION:0:6}"
    git logs --revision "$(commitNumber "$REVISION")"
}

recover() {
    printf "\n\n* * *   R E C O V E R (git-save)   * * *\n\n"

    # reset the index, but not the working tree (i.e. the changed files are preserved but not marked for commit)
    git reset "$(originRevision)" --

    if [[ -z ${VERBOSE+set} ]] ; then
        exec 1>&3 2>&4
    fi

    # for ERROR_MESSAGE in "${ERRORS[@]}" ; do
    #     error "$ERROR_MESSAGE"
    # done
    error "recovered at $ORIGIN_HASH" ; usage ; exit 1
}

trap recover SIGINT ERR && main
