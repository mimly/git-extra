#!/bin/bash

set -o errexit
set -o errtrace
set -o nounset
set -o pipefail

. bash_template.sh

SCRIPT_VERSION="1.0.0"
SCRIPT_DESCRIPTION="-"
SCRIPT_FULL_DESCRIPTION="-"
SCRIPT_ARGUMENTS="[OPTION]... FILE..."
SCRIPT_OPTIONS=(\
    "-o ORGANIZATION, --organization=ORGANIZATION"\
    "-a ASSIGNMENT, --assignment=ASSIGNMENT"\
    "-t TEMPLATE, --template=TEMPLATE"\
    "-v, --verbose"\
    "--help"\
    "--version"\
)
SCRIPT_OPTION_DESCRIPTIONS=(\
    "e.g. prutt21, intnet22"\
    "e.g. lab1, project"\
    "path to template"\
    "explain what is being done"\
    "display this help and exit"\
    "output version information and exit"\
)
SCRIPT_EXAMPLES=(\
    "--organization prutt21 --assignment lab1 --template templates/lab1 groups"\
)
SCRIPT_SEE_ALSO=(\
    "gh-add-collaborators(1)"\
    "gh-add-members(1)"\
    "gh-clean-repos(1)"\
    "gh-sort-groups(1)"\
)

# We use "$@" instead of $* to preserve argument-boundary information
# Add : to suppress getopt error messages, i.e. getopt -o ':...'
ARGS=$(getopt -o 'o:a:t:v' --long 'organization:,assignment:,template:,verbose,help,version,update-manual' -- "$@") || { usage ; exit 1 ; }
eval "set -- ${ARGS}"

while true; do
    case $1 in
        (-o|--organization)
            ORGANIZATION=$2 ; shift 2 ;;
        (-a|--assignment)
            ASSIGNMENT=$2 ; shift 2 ;;
        (-t|--template)
            TEMPLATE=$2 ; shift 2 ;;
        (-v|--verbose)
            verbose= ; shift ;;
        (--help)
            usageFull ; exit 0 ;;
        (--version)
            about ; changelog ; exit 0 ;;
        (--update-manual) # hidden option
            updateManual ; exit 0 ;;
        (--)
            shift ; break ;;
        (*)
            usage ; exit 1 ;;
    esac
done

FILES=("$@")

[[ -v ORGANIZATION ]] || { error "required parameters not supplied" ; usage ; exit 1 ; } ;
[[ -v ASSIGNMENT ]] || { error "required parameters not supplied" ; usage ; exit 1 ; } ;
[[ -v TEMPLATE ]] || { error "required parameters not supplied" ; usage ; exit 1 ; } ;

join() {
    local -n str=$1
    local IFS="$2"; shift 2; str="$*";
}

split() {
    local -n arr=$1
    local IFS="$2"; shift 2; read -ra arr <<< "$*"
}

# gh auth login --hostname "gits-15.sys.kth.se"

# Add default keys ~/.ssh/id_{r,d,ecd,...}sa to an agent and specifie a maximum lifetime in minutes
eval "$(ssh-agent)"
ssh-add -t 30m ~/.ssh/git/id_ed25519

while read -r line ; do
    declare -a STUDENTS
    split STUDENTS " " "${line}" # split by ' ' and uppdate STUDENTS : array
    GROUP=
    join GROUP "-" "${STUDENTS[@]}" # join by '-' and update GROUP : string

    mkdir "${GROUP}-${ASSIGNMENT}"
    cd "${GROUP}-${ASSIGNMENT}" || exit 1
    git init >/dev/null
    git profile kth >/dev/null
    rsync -a "../${TEMPLATE}" .
    #git remote remove origin
    git revision --date="2022-12-05T00:00:00" "Initial commit" >/dev/null
    gh repo create "${ORGANIZATION}/${GROUP}-${ASSIGNMENT}" --private --source=. --push
    for STUDENT in "${STUDENTS[@]}" ; do
        gh api -X PUT "/repos/${ORGANIZATION}/${GROUP}-${ASSIGNMENT}/collaborators/${STUDENT}" #-f '{"permission": push}' # pull, push (default), admin, maintain, triage, custom repository role name
    done
    cd .. || exit 1

    # echo "${line}"
done < <(cat "${FILES[@]:--}") || true # or <(cat "$@" /dev/stdin)
