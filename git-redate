#!/bin/bash

# shellcheck disable=SC1091,SC2034

set -o errexit
set -o nounset
set -o pipefail

. bash_template.sh
. fs4git.sh

SCRIPT_NAME=$(basename "${0}")
SCRIPT_VERSION="0.0.1"
SCRIPT_AUTHOR="mimly"
SCRIPT_GIT="https://github.com/mimly"
SCRIPT_LICENSE="MIT"
SCRIPT_DESCRIPTION="modify old revision"
SCRIPT_ARGUMENTS="[OPTION]... REVISION"
SCRIPT_OPTIONS=(\
    "-d DATE, --date=DATE"\
    "-m MESSAGE, --message=MESSAGE"\
    "-v, --verbose"\
    "--help"\
    "--version"\
)
SCRIPT_OPTION_DESCRIPTIONS=(\
    "date format is YYYY-mm-ddTHH:MM:SS"\
    ""\
    "explain what is being done"\
    "display this help and exit"\
    "output version information and exit"\
)
SCRIPT_EXAMPLES=(\
    "REVISION"\
)

### D E F A U L T   V A L U E S ###
ORIGIN_HASH=$(commitHash HEAD)

# We use "$@" instead of $* to preserve argument-boundary information
# Add : to suppress getopt error messages, i.e. getopt -o ':...'
ARGS=$(getopt -o 'd:m:v' --long 'date:,message:,verbose,help,version,update-manual' -- "$@") || { usage ; exit 1 ; }
eval "set -- $ARGS"

while true; do
    case $1 in
        (-d|--date)
            isValidDate "$2" || { error "date format is YYYY-mm-ddTHH:MM:SS" ; usage ; exit 1 ; }
            DATE=$2 ; shift 2 ;;
        (-m|--message)
            MESSAGE=$2 ; shift 2 ;;
        (-v|--verbose)
            VERBOSE= ; shift ;;
        (--help)
            usageFull ; exit 0 ;;
        (--version)
            about ; changelog ; exit 0 ;;
        (--update-manual) # hidden option
            updateManual ; exit 0 ;;
        (--)
            shift ; break ;;
        (*)
            usage ; exit 1 ;;
    esac
done

REMAINING_ARGS=("$@")

main() {
    if [[ ${#REMAINING_ARGS[@]} -ne 1 ]] ; then
        error "required parameters not supplied" ; usage ; exit 1
    fi
    local REVISION=${REMAINING_ARGS[0]}

    if ! isValidCommit "$REVISION" ; then
        error "revision does not exist" ; usage ; exit 1
    fi

    : "${HASH:=$(commitHash "$REVISION")}"
    local MODIFIED_REVISION
    MODIFIED_REVISION="$(git logs --hash "$HASH")"
    : "${DATE:=$(commitDate "$REVISION")}"
    : "${MESSAGE:=$(commitMessage "$REVISION")}"

    if [[ -z ${VERBOSE+set} ]] ; then
        exec 3>&1 4>&2 1>/dev/null 2>&1
    fi &&\

    git join --date "$DATE" --message "$MESSAGE" "$REVISION..$(( REVISION + 1 ))" &&\

    if [[ -z ${VERBOSE+set} ]] ; then
        exec 1>&3 2>&4
    fi &&\

    printf "%s\n" "$MODIFIED_REVISION"
    printf "* * * REVISION MODIFIED AS FOLLOWS: * * *\n\n" &&\
    git logs --number "$REVISION"
}

recover() {
    local REFLOG_HEAD
    REFLOG_HEAD=$(git reflog | grep "${ORIGIN_HASH:0:6}" | head -1 | awk '{ print substr($2, 0, length($2) - 1) }')
    git reset "$REFLOG_HEAD" --

    if [[ -z ${VERBOSE+set} ]] ; then
        exec 1>&3 2>&4
    fi

    error "recovered at $ORIGIN_HASH" ; usage ; exit 1
}

trap recover SIGINT

main || recover
